# -*- coding: utf-8 -*-
"""Natural Language Processing- Text classification with movie reviews

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XzImggtS2-IczULXFATn5x4kyFKDwGNb
"""

from __future__ import absolute_import, division, print_function, unicode_literals

import tensorflow as tf
from tensorflow import keras

import numpy as np

import matplotlib.pyplot as plt

print('Tensorflow: {}\nNumpy: {}'.format(tf.__version__, np.version.version))

"""**Load the IMDB dataset**"""

imdb = keras.datasets.imdb
(train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=10000)

"""**About the data**"""

print('Training data: {}, labels: {}'.format(len(train_data), len(train_labels)))

print(train_data[0])

len(train_data[0]), len(train_data[1])

"""**Converting integers back to words**"""

word_index = imdb.get_word_index()

word_index = {k:(v+3) for k,v in word_index.items()}
word_index['<PAD>'] = 0
word_index['<START>'] = 1
word_index['<UNK>'] = 2
word_index['<UNUSED>'] = 3

reverse_word_index = dict([(value, key) for  (key, value) in word_index.items()])

def decode_review(text):
    return ' '.join([reverse_word_index.get(i, '?') for i in text])

decode_review(train_data[0])

"""**Prepare the data**

Since the movie reviews must be the same length, we will use the pad_sequences function to standardize the lengths.


"""

train_data = keras.preprocessing.sequence.pad_sequences(train_data, value=word_index['<PAD>'], padding='post', maxlen=256)
test_data = keras.preprocessing.sequence.pad_sequences(test_data, value=word_index['<PAD>'], padding='post', maxlen=256)

len(train_data[0]), len(train_data[1])

print(train_data[0])

"""**Build the model**"""

VOCAB_SIZE = 10000

model = keras.Sequential()

model.add(keras.layers.Embedding(VOCAB_SIZE, 16))
model.add(keras.layers.GlobalAveragePooling1D())
model.add(keras.layers.Dense(16, activation=tf.nn.relu))
model.add(keras.layers.Dense(1, activation=tf.nn.sigmoid))

model.summary()

"""**Compile the model**"""

model.compile(optimizer='adam',
             loss='binary_crossentropy',
             metrics=['accuracy'])

"""**Create validation set**"""

x_val = train_data[:10000]
partial_x_train = train_data[10000:]

y_val = train_labels[:10000]
partial_y_train = train_labels[10000:]

"""**Training the mode**"""

history = model.fit(partial_x_train, partial_y_train, epochs=40, batch_size=512, validation_data=(x_val, y_val), verbose=1)

"""**Evaluation**"""

model.evaluate(test_data, test_labels)

history_dict = history.history
history_dict.keys()

accuracy = history_dict['accuracy']
val_accuracy = history_dict['val_accuracy']
loss = history_dict['loss']
val_loss = history_dict['val_loss']

epochs = range(1, len(accuracy) + 1)

plt.xlabel('Epochs')

plt.plot(epochs, accuracy, 'g--', label='Training accuracy')
plt.plot(epochs, val_accuracy, 'g', label='Validation accuracy')

plt.plot(epochs, loss, 'r--', label='Training loss')
plt.plot(epochs, val_loss, 'r', label='Validation loss')

plt.legend()
plt.show()